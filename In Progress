import os
os.environ['CUDA_VISIBLE_DEVICES'] = '-1'
import random
import gym
import numpy as np
from collections import deque
from tensorflow.python.keras.models import Sequential, load_model
from tensorflow.python.keras.layers import Dense, Flatten
from tensorflow.python.keras.optimizer_v2.adam import Adam
import h5py

MODEL_PATH = './SpaceInvadersModel.h5'

def OurModel(input_shape, action_space):
    env = gym.make('ALE/SpaceInvaders-v5')
    input_shape = env.observation_space.shape
    action_space = env.action_space.n
    
    model = Sequential()
    model.add(Dense(4, input_shape=input_shape, init='uniform', activation='relu'))
    model.add(Flatten())
    model.add(Dense(4, init='uniform', activation='relu'))
    model.add(Dense(action_space, init='uniform', activation='linear')) 
    model.compile(loss = "mse",optimizer=Adam(learning_rate=1e-3,  epsilon=0.1), metrics=["accuracy"])
    return model

class DQNAgent():
    def __init__(self, *args, **kwargs):
        self.env = gym.make('ALE/SpaceInvaders-v5', render_mode = 'human')
        self.state_size = self.env.observation_space.shape
        self.action_size = self.env.action_space.n
        self.EPISODES = 10000000
        self.memory = deque(maxlen=2000)

        
        self.gamma = 0.95    # discount rate
        self.epsilon = 1.0  # exploration rate
        self.epsilon_min = 0.1
        self.epsilon_decay = 0.999
        self.batch_size = 128
        self.train_start = 1000

        # create main model
        
        self.model = OurModel(input_shape=(self.state_size,), action_space = self.action_size)
        

    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))
        if len(self.memory) > self.train_start:
            if self.epsilon > self.epsilon_min:
                self.epsilon *= self.epsilon_decay

    def act(self, state):
        if np.random.random() <= self.epsilon:
            return random.randrange(self.action_size)
        else:
            return np.argmax(self.model.predict(state))

    def replay(self):
        if len(self.memory) < self.train_start:
            return
        # Randomly sample minibatch from the memory
        minibatch = random.sample(self.memory, min(len(self.memory), self.batch_size))

        state = ((self.batch_size, self.state_size))
        next_state = ((self.batch_size, self.state_size))
        action, reward, done = [], [], []

        # do this before prediction
        # for speedup, this could be done on the tensor level
        # but easier to understand using a loop
        for i in range(self.batch_size):
            state = minibatch[i][0]
            action.append(minibatch[i][1])
            reward.append(minibatch[i][2])
            next_state = minibatch[i][3]
            done.append(minibatch[i][4])

        # do batch prediction to save speed

        target = self.model.predict(state)
        target_next = self.model.predict(next_state)

        for i in range(self.batch_size):
            # correction on the Q value for the action used
            if done[i]:
                target[i][action[i]] = reward[i]
            else:
                # Standard - DQN
                # DQN chooses the max Q value among next actions
                # selection and evaluation of action is on the target Q Network
                # Q_max = max_a' Q_target(s', a')
                target[i][action[i]] = reward[i] + self.gamma * (np.amax(target_next[i]))

        # Train the Neural Network with batches
        if (self.EPISODES == 0):
            self.model.fit(state, target, batch_size=self.batch_size, verbose=0)

    def train(self):
        for e in range(self.EPISODES):
            state = self.env.reset()
            state = np.reshape(state, [210, 160, 3])
            done = False
            score = 0 
            while not done:
                action = self.env.action_space.sample()
                next_state, reward, done, _ = self.env.step(action)
                next_state = np.reshape(next_state, [210, 160, 3])
                self.remember(state, action, reward, next_state, done)
                score += reward
                if done:                   
                    print("episode: {}/{}, score: {}, e: {:.2}".format(e, self.EPISODES, score, self.epsilon))
                    self.model.save(MODEL_PATH)
                    if (score >= 500):
                        self.model.save('./GoodSpaceInvadersModel.h5')
                self.replay()
                
                

    def test(self):
        #load_model(MODEL_PATH)
        for e in range(self.EPISODES):
            state = self.env.reset()
            state = np.reshape(state, [210,160,3])
            done = False
            i = 0
            while not done:
                action = np.argmax(self.model.predict(state))
                next_state, reward, done, _ = self.env.step(action)
                state = np.reshape(next_state, [210,160,3])
                i += 1
                if done:
                    print("episode: {}/{}, score: {}".format(e, self.EPISODES, i))
                    break
                
if __name__ == "__main__":
    agent = DQNAgent()
    agent.train()
    #agent.test()
